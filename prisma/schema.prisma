// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  listedHomes   Home[]
  sites Site[]
}
model Post {
  id            String       @id @default(cuid())
  title         String?      @db.Text
  description   String?     @db.Text
  content       String?     @db.Text
  slug          String      @default(cuid())
  image      String?   @db.Text
  imageBlurhash String?   @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  published     Boolean      @default(false)
  site          Site? @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?
  @@unique([id, siteId], name: "post_site_constraint")
}

model Site {
  id            String  @id @default(cuid())
  name          String?
  description   String? @db.Text
  logo          String?
  image         String? @db.Text
  imageBlurhash String? @db.Text
  subdomain     String? @unique
  customDomain  String? @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User? @relation(fields: [userId], references: [id])
  userId        String?
  posts         Post[]
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Home {
  id          String   @id @default(cuid())
  image       String?
  title       String
  description String
  price       Float
  guests      Int
  beds        Int
  baths       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
}
